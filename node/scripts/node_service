#!/bin/bash

# import node variables
source /home/pi/monitoring/common/scripts/common_var

# functions
function print_usage() {
cat <<EOF
Usage:

  node_service [OPTION]...

Options:

    -w, --wlan [ARGUMENT]
      manages wlan service ${SERVICE_NODE_WLAN}
    
    -b, --bt [ARGUMENT]
      manages bluetooth service ${SERVICE_NODE_WLAN}
    
    --help
      print help page

Arguments:

  start
    start monitoring service until shutdown/stop
  
  stop
    stop monitoring service until start/reboot (if enabled)
  
  enable
    enable automatic monitoring service start after boot
    (still can be controlled by start/stop for current session)
  
  disable
    disable automatic monitoring after startup
    (still can be controlled by start/stop for current session)
  
  status
    show status of given systemd service

Examples:

  node_service -w status
  node_service -b start

EOF
}

function print_help() { 
cat <<EOF

NODE MANAGE SYSTEMD SERVICES

This command is used to start/stop monitoring through systemd service,
to enable/disable automatic start of this service at system boot or to
show current status of specified service.

For more information about monitoring use node_dump --help

systemd directory: ${DIR_SYSTEMD_SERVICE}

name of wlan service: ${SERVICE_NODE_WLAN}
name of bluetooth service: ${SERVICE_NODE_BT}

Location cannot be altered because scripts on this or remote device
might be depending on it!

EOF
print_usage
}

# options parsing

if [[ $# -eq 0 ]];
then
  echo ""
  print_usage
  exit 1
fi

while [ $# -gt 0 ]
do
  case $1 in
    --help)
      print_help
      exit 0      
      ;;

    -w|--wlan)
      # check if argument -w empty
      if [[ -z "$2" ]] || [[ "$2" == -* ]];
      then
        echo "ERROR: invalid argument $2 for option $1"
	print_usage
	break
      fi

      case $2 in
        start|stop|enable|disable|status)
          echo "systemctl ${SERVICE_NODE_WLAN}: $2"
          systemctl "$2" "${SERVICE_NODE_WLAN}"
          ;;

        *)
          echo "ERROR: argument $2 unknown!"
	  print_usage
	  break
	  ;;
      esac
      shift
      ;;

    -b|--bt)
      # check if argument -b empty
      if [[ -z "$2" ]] || [[ "$2" == -* ]];
      then
        echo "ERROR: invalid argument $2 for option $1"
	print_usage
	break
      fi

      case $2 in
        start|stop|enable|disable|status)
          echo "systemctl ${SERVICE_NODE_BT}: $2"
	  systemctl "$2" "${SERVICE_NODE_BT}"
          ;;

        *)
          echo "ERROR: argument $2 unknown!"
	  print_usage
	  break;
	  ;;
      esac
      shift
      ;;

    *)
      echo "ERROR: option $1 unknown!"
      print_usage
      break
      ;;
  esac
  shift
done

